#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# main.py file is part of spman

# Copyright 2016 MyRequiem <mrvladislavovich@gmail.com>
# All rights reserved

# spman - Slackware package manager
# Home page: https://github.com/MyRequiem/spman

# Spman is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""
main.py
"""

import sys

from spman.maindata import MainData
from spman.checkprgver import check_prg_ver
from spman.helpmess import show_help_mess
from spman.majortests import MajorTests
from spman.repolist import show_repo_list
from spman.showinforepos import ShowInfoRepos
from spman.update import Update
from spman.checkhealth import CheckHealth
from spman.findnewconfigs import FindNewConfigs
from spman.checkupgrade import CheckUpgrade
from spman.downloadpkg import DownloadPkg
from spman.queue import Queue


class Main(object):
    """
    class Main
    """
    def __init__(self):
        # list of arguments
        # delete argument[0] (path and name of the script)
        self.args = sys.argv[1:]
        self.meta = MainData()
        self.repos = self.meta.get_repo_dict()
        self.commands = {
            '-h': self.show_help,
            '--help': self.show_help,
            '-v': self.check_version,
            '--check-version': self.check_version,
            '-l': self.show_repo_list,
            '--repolist': self.show_repo_list,
            '-r': self.show_info_repos,
            '--repoinfo': self.show_info_repos,
            '-b': self.show_blacklist,
            '--blacklist': self.show_blacklist,
            '-u': self.update,
            '--update': self.update,
            '-t': self.check_health,
            '--health': self.check_health,
            '-w': self.find_new_configs,
            '--new-config': self.find_new_configs,
            '-g': self.check_upgrade,
            '--check-upgrade': self.check_upgrade,
            '-d': self.download_pkg,
            '--download': self.download_pkg,
            '-q': self.processing_queue,
            '--queue': self.processing_queue
        }

    def start(self):
        """
        parse arguments and launch of the relevant options
        """
        # program is run without arguments
        if not self.args:
            show_help_mess('error')

        if self.args[0] in self.commands:
            # check exists dirs and files from /etc/spman/spman.conf
            args = ['-h',
                    '--help',
                    '-v',
                    '--check-version',
                    '-l',
                    '--repolist',
                    '-b',
                    '--blacklist',
                    '-u',
                    '--update',
                    '-t',
                    '--health',
                    '-w',
                    '--new-config']
            if len(self.args) > 1 or self.args[0] not in args:
                MajorTests().start()

            # run command
            self.commands[self.args[0]]()
        else:
            show_help_mess('error')

    def show_help(self):
        """
        show help message
        """
        if len(self.args) == 1:
            show_help_mess()
        else:
            show_help_mess('error')

    def show_repo_list(self):
        """
        show repo list from /etc/spman/repo-list
        """
        if len(self.args) > 1:
            show_help_mess('error')

        show_repo_list()

    def update(self):
        """
        Update PACKAGES.TXT, SLACKBUILDS.TXT and
        ChangeLog.txt for each repository
        """
        if len(self.args) > 1:
            show_help_mess('error')

        Update().start()

    def show_info_repos(self):
        """
        show information about all repositories.
        """
        if len(self.args) > 1:
            show_help_mess('error')

        ShowInfoRepos().start()

    def check_version(self):
        """
        check program version
        """
        if len(self.args) > 1:
            show_help_mess('error')

        check_prg_ver()

    def check_health(self):
        """
        Check health installed packages
        """
        if len(self.args) > 1:
            show_help_mess('error')

        CheckHealth().start()

    def find_new_configs(self):
        """
        Find all '*.new' files from /etc/ and /usr/share/ folders and subfolders
        """
        if len(self.args) > 1:
            show_help_mess('error')

        FindNewConfigs().start()

    def check_upgrade(self):
        """
        Check packages for upgrade
        """
        if len(self.args) > 1:
            show_help_mess('error')

        CheckUpgrade().start()

    def show_blacklist(self):
        """
        Show blacklist
        """
        if len(self.args) > 1:
            show_help_mess('error')

        print()
        for pkg in self.meta.get_blacklist():
            print(pkg)

        print('\n{0}{1}blacklist{2}\n'.format(self.meta.clrs['grey'],
                                              self.meta.configs_path,
                                              self.meta.clrs['reset']))

    def download_pkg(self):
        """
        Download package or source + SlackBuild script
        """
        if len(self.args) < 4:
            show_help_mess('error')

        # Examples:
        # spman --download --src sbo pkg1 pkg2 pkg3
        # spman -d --pkg alienbob pkg1 pkg2 pkg3
        mode = self.args[1]
        repo = self.args[2]
        pkglist = self.args[3:]

        if mode not in ['--src', '--pkg']:
            show_help_mess('error')

        if mode == '--pkg' and repo == 'sbo':
            print('Only SlackBuild script with source code\n'
                  'can be downloaded from \'sbo\' repository')
            show_help_mess('error')

        if mode == '--src' and repo == 'multilib':
            print('Only binary packages can be\ndownloaded '
                  'from \'multilib\' repository')
            show_help_mess('error')

        if repo not in self.repos:
            show_help_mess(repo)

        DownloadPkg(mode, repo, pkglist).start()

    def processing_queue(self):
        """
        processing queue for 'sbo' repository
        """
        print(Queue())
        print(self.meta)
