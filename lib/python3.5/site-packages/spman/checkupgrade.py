#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# checkupgrade file is part of spman

# Copyright 2016 MyRequiem <mrvladislavovich@gmail.com>
# All rights reserved

# spman - Slackware package manager
# Home page: https://github.com/MyRequiem/spman

# Spman is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""
Check packages for upgrade
"""

from spman.maindata import MainData
from spman.pkgs import Pkgs
from spman.getrepodata import GetRepoData


class CheckUpgrade(object):
    """
    Check packages for upgrade
    """
    def __init__(self):
        self.meta = MainData()
        self.pkgs = Pkgs()
        self.blacklist = self.meta.get_blacklist()
        self.aliendata = {}
        self.sbodata = {}
        self.multidata = {}
        self.slackdata = {}

    def start(self):
        """
        start check packages for upgrade
        """
        self.get_data_repos()

        for pkg in self.pkgs.find_pkgs_on_system():
            parts = self.pkgs.get_parts_pkg_name(pkg)
            if parts[0] not in self.blacklist:
                # gcc-5.3.0_multilib-x86_64-3alien --> multilib
                # compat32-tools-3.7-noarch-1alien --> multilib
                # mozilla-firefox-l10n-ru-45.2.0-x86_64-1alien
                if (self.aliendata and
                        'alien' in parts[3] and
                        'multilib' not in parts[1] and
                        parts[0] != 'compat32-tools'):

                    self.check_pkg(parts, self.aliendata)
                elif self.sbodata and 'SBo' in parts[3]:
                    self.check_sbo_pkg(parts)
                elif self.multidata and 'compat32' in parts[3]:
                    self.check_pkg(parts, self.multidata)
                elif self.slackdata:
                    self.check_pkg(parts, self.slackdata)

    def get_data_repos(self):
        """
        get data from PACKAGES.TXT (SLACKBUILDS.TXT)
        """
        repos = self.meta.get_repo_dict()

        if 'alienbob' in repos:
            self.aliendata = GetRepoData('alienbob').start()
        if 'sbo' in repos:
            self.sbodata = GetRepoData('sbo').start()
        if 'multilib' in repos:
            self.multidata = GetRepoData('multilib').start()
        if 'slack' in repos:
            self.slackdata = GetRepoData('slack').start()

    @staticmethod
    def check_pkg(parts, data):
        """
        check pkg
        """
        pkgdata = ''
        if parts[0] in data['pkgs']:
            pkgdata = data['pkgs'][parts[0]]

        if pkgdata:
            if (parts[1] != pkgdata[0][1] or
                    parts[2] != pkgdata[0][2] or
                    parts[3] != pkgdata[0][3]):
                print('{0} --> {1}'.format('-'.join(parts),
                                           '-'.join(pkgdata[0])))

    def check_sbo_pkg(self, parts):
        """
        check sbo pkg
        """
        pkgdata = ''
        if parts[0] in self.sbodata['pkgs']:
            pkgdata = self.sbodata['pkgs'][parts[0]]

        if pkgdata and parts[1] != pkgdata[0]:
            print('{0} --> {1}-{2}-{3}-{4}'.format('-'.join(parts),
                                                   parts[0],
                                                   pkgdata[0],
                                                   parts[2],
                                                   parts[3]))
