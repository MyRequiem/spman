#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# downloadpkg file is part of spman

# Copyright 2016 MyRequiem <mrvladislavovich@gmail.com>
# All rights reserved

# spman - Slackware package manager
# Home page: https://github.com/MyRequiem/spman

# Spman is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""
Download packages or sources (SlackBuilds)
"""

from os import (
    path,
    rename
)
from shutil import rmtree
from subprocess import call

from spman.maindata import MainData
from spman.getrepodata import GetRepoData
from spman.utils import download


class DownloadPkg(object):
    """
    Download packages or sources (SlackBuilds)
    """
    def __init__(self, mode, repo, pkglist):
        self.meta = MainData()
        self.os_ver = self.meta.get_os_version()
        # download src or pkg
        self.mode = mode
        # repo name
        self.repo = repo
        # packages list for download
        self.pkglist = pkglist
        self.repo_url = self.meta.get_repo_dict()[self.repo]
        self.repodata = GetRepoData(self.repo).start()
        self.wgetprefix = self.meta.get_spman_conf()['BUILD_PATH']
        self.wgetdir = ('--no-check-certificate -r -q -nH -ct 0 -w 2 -l 10 '
                        '--cut-dirs={0} --no-parent -R *.meta4,*.mirrorlist,'
                        'index.html*')

    def start(self):
        """
        start download
        """
        if self.repo == 'alienbob':
            self.download_alienbob()

        if self.repo == 'multilib':
            self.download_multilib()

        if self.repo == 'slack':
            self.download_slack()

    def download_alienbob(self):
        """
        download from alienbob repository
        """
        arch = 'x86_64' if self.meta.arch == 'x86_64' else 'x86'
        for pkg in self.pkglist:
            if not self.check_exist_pkg(pkg):
                continue

            if self.mode == '--pkg':
                # download binary package
                fname = self.get_fname(self.repodata['pkgs'][pkg])
                url = '{0}{1}/{2}/{3}/{4}'.format(self.repo_url,
                                                  self.os_ver,
                                                  arch,
                                                  pkg,
                                                  fname)

                dfile = '{0}{1}'.format(self.wgetprefix, fname)
                download(dfile, url, self.wgetprefix)
            else:
                # download directory with source code and SlackBuild script
                url = '{0}{1}/build/'.format(
                    self.repo_url.replace('sbrepos', 'slackbuilds'), pkg)
                dfile = '{0}build'.format(self.wgetprefix)
                download(dfile, url, self.wgetprefix,
                         self.wgetdir.format(self.get_cut_dirs(url)))

                # if dir downloaded, rename to pkgname
                if path.isdir(dfile):
                    new_dir_name = '{0}{1}'.format(self.wgetprefix, pkg)
                    # if this directory already exists remove it
                    if path.isdir(new_dir_name):
                        rmtree(new_dir_name)
                    rename(dfile, new_dir_name)
                    self.set_chmod(new_dir_name)

    def download_multilib(self):
        """
        download binary package(s) from multilib repository
        """
        for pkg in self.pkglist:
            if not self.check_exist_pkg(pkg):
                continue

            pkgdata = self.repodata['pkgs'][pkg]
            fname = self.get_fname(pkgdata)
            location = '{0}/'.format(pkgdata[1]) if pkgdata[1] else ''
            url = '{0}{1}/{2}{3}'.format(self.repo_url,
                                         self.os_ver,
                                         location,
                                         fname)
            dfile = '{0}{1}'.format(self.wgetprefix, fname)
            download(dfile, url, self.wgetprefix)

    def download_slack(self):
        """
        download from slackware repository (directory 'patches')
        """
        for pkg in self.pkglist:
            if not self.check_exist_pkg(pkg):
                continue

            pkgdata = self.repodata['pkgs'][pkg]
            arch = '64' if self.meta.arch == 'x86_64' else ''
            repo_url = '{0}slackware{1}-{2}/patches/'.format(self.repo_url,
                                                             arch,
                                                             self.os_ver)
            if self.mode == '--pkg':
                # download binary package
                fname = self.get_fname(pkgdata)
                url = '{0}packages/{1}'.format(repo_url, fname)
                dfile = '{0}{1}'.format(self.wgetprefix, fname)
                download(dfile, url, self.wgetprefix)
            else:
                # download directory with source code and SlackBuild script
                url = '{0}source/{1}/'.format(repo_url, pkg)
                dfile = '{0}{1}'.format(self.wgetprefix, pkg)
                download(dfile, url, self.wgetprefix,
                         self.wgetdir.format(self.get_cut_dirs(url)))
                if path.isdir(dfile):
                    self.set_chmod(dfile)

    @staticmethod
    def set_chmod(path_to_dir):
        """
        chmod 744 for *.SlackBuild and *.sh into dir
        """
        call(('find {0} -type f -a \\( -name "*.SlackBuild" '
              '-o -name "*.sh" \\) -exec '
              'chmod 744 {{}} \\;').format(path_to_dir),
             shell=True)

    @staticmethod
    def get_fname(pkgdata):
        """
        return file name for downlod
        """
        return '{0}.{1}'.format('-'.join(pkgdata[0]),
                                pkgdata[8])

    def check_exist_pkg(self, pkg):
        """
        check exist package on repository
        """
        if pkg not in self.repodata['pkgs']:
            print(('{0}Package {1} not found in {2} '
                   'repository{3}').format(self.meta.clrs['red'],
                                           pkg,
                                           self.repo,
                                           self.meta.clrs['reset']))
            return False

        return True

    @staticmethod
    def get_cut_dirs(url):
        """
        return count cut dirs from url for wget, when download directory
        """
        if not url.endswith('/'):
            url += '/'

        return len(url.split('/')[3:-2])
