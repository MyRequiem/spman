#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# checkprgver file is part of spman

# Copyright 2016 MyRequiem <mrvladislavovich@gmail.com>
# All rights reserved

# spman - Slackware package manager
# Home page: https://github.com/MyRequiem/spman

# Spman is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""
Check program version
"""

from os import (
    path,
    remove
)
from subprocess import call

from spman.maindata import MainData


def check_prg_ver():
    """
    check program version
    """
    meta = MainData()
    print('{0}Checking program version...{1}'.format(meta.clrs['grey'],
                                                     meta.clrs['reset']))
    metafile = '/tmp/maindata.py'
    if path.isfile(metafile):
        remove(metafile)

    url = (meta.home_page.replace('github.com', 'raw.githubusercontent.com') +
           '/master/lib/python3.5/site-packages/spman/maindata.py')

    call(('wget {0} --directory-prefix='
          '/tmp/ {1}').format(meta.get_spman_conf()['WGET_OPT'],
                              url),
         shell=True)

    if not path.isfile(metafile):
        print(('{0}Failed download file:{1}\n'
               '{2}{3}{1}').format(meta.clrs['red'],
                                   meta.clrs['reset'],
                                   meta.clrs['grey'],
                                   url))
        raise SystemExit

    local_ver = meta.prog_version
    print('Installed version: {0}\n'.format(local_ver))

    with open(metafile) as mfile:
        for line in mfile:
            if 'self.prog_version =' in line:
                ver = line.split('=')[1].strip()[1:-1]
                if ver != local_ver:
                    print(('{0}New version are available:{2} {4}\nVisit: '
                           '{1}{3}/releases{2}\nor download new version '
                           'src code:\n{1}{3}/archive/'
                           '{4}.tar.gz{2}').format(meta.clrs['lred'],
                                                   meta.clrs['cyan'],
                                                   meta.clrs['reset'],
                                                   meta.home_page,
                                                   ver))
                else:
                    print(('{0}You are using the latest version '
                           'spman{1}').format(meta.clrs['green'],
                                              meta.clrs['reset']))
                print()
                break

    if not mfile.closed:
        mfile.close()
