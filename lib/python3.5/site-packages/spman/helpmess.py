#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# helpmess.py file is part of spman

# Copyright 2016 MyRequiem <mrvladislavovich@gmail.com>
# All rights reserved

# spman - Slackware package manager
# Home page: https://github.com/MyRequiem/spman

# Spman is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""
Help messages and usage
"""

from spman.maindata import MainData


def show_help_mess(repo=''):
    """
{0}Version: {1}{6}
Usage: spman command [param[, param ...]]

{2} -h|--help{3}            Print this help message and exit.
{2} -v|--check-version{3}   Check program version.
{2} -l|--repolist{3}        Print a list of all the repositories.
{2} -r|--repoinfo{3}        Show information about all active repositories.
{2} -u|--update{3}          Update local data for all repositories.
{2} -t|--health{3}          Check health installed packages.
{2} -w|--new-config{3}      Find all '*.new' files from /etc/ and /usr/share/
                        folders and subfolders.
{2} -g|--check-upgrade{3}   Check packages for upgrade.

{4}Home page: {7}
{0}{5}{6}
"""

    meta = MainData()

    if repo == 'error':
        # parameter input error
        print(('{0}Wrong parameters:{1} \'spman -h\' or '
               '\'spman --help\' for help{2}').format(meta.clrs['red'],
                                                      meta.clrs['cyan'],
                                                      meta.clrs['reset']))
        raise SystemExit
    elif repo:
        # repository does not exist
        repos = ', '.join([rep for rep in sorted(meta.get_repo_dict())])
        print(('{0}Repository {1}\'{2}\'{0} does not exist{3}\n'
               'Available repository: {4}{5}\n{6}config file: '
               '{7}repo-list{3}').format(meta.clrs['red'],
                                         meta.clrs['cyan'],
                                         repo,
                                         meta.clrs['reset'],
                                         meta.clrs['green'],
                                         repos,
                                         meta.clrs['grey'],
                                         meta.configs_path))
        raise SystemExit()

    # show usage
    print(str(show_help_mess.__doc__).format(meta.clrs['grey'],
                                             meta.prog_version,
                                             meta.clrs['yellow'],
                                             meta.clrs['cyan'],
                                             meta.clrs['green'],
                                             meta.mail,
                                             meta.clrs['reset'],
                                             meta.home_page))
