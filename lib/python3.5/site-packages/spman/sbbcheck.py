#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# sbbcheck.py file is part of spman

# Copyright 2016 MyRequiem <mrvladislavovich@gmail.com>
# All rights reserved

# spman - Slackware package manager
# Home page: https://github.com/MyRequiem/spman

# Spman is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""
Search dependency problems in the system packages using 'sbbdep' tool.
"""

import subprocess

from spman.maindata import MainData
from spman.pkgs import Pkgs
from spman.utils import (
    get_line,
    get_indent
)


class SbbCheck(object):
    """
    Search dependency problems in the system packages using 'sbbdep' tool.
    """
    def __init__(self):
        self.meta = MainData()
        self.pkgs = Pkgs()
        self.pkgname = ''

    def start(self):
        """
        start search dependency problems
        """
        # if sbbdep package not installed
        if not self.pkgs.find_pkgs_on_system('sbbdep'):
            print(('You need to install {0}\'sbbdep\'{1} package from \'sbo\' '
                   'repository:\nspman --queue --clear\nspman --queue --add '
                   'sbbdep\nspman --queue --install').format(
                       self.meta.clrs['lcyan'], self.meta.clrs['reset']))
            raise SystemExit

        # list all packages on system
        pkgs = self.pkgs.find_pkgs_on_system()
        # updata sbbdep database
        subprocess.call('sbbdep', shell=True)

        sbblog = '/tmp/sbbcheck.log'
        # clear log file
        open(sbblog, 'w').close()
        logfile = open(sbblog, 'a')

        numpkg = 1
        brokenpkg = 0
        for pkg in pkgs:
            self.pkgname = self.pkgs.get_parts_pkg_name(pkg)[0]

            print('{0}.{1}{2}Checking {3}'
                  '{4}'.format(numpkg,
                               get_indent(len(str(numpkg)), 5),
                               self.meta.clrs['yellow'],
                               self.meta.clrs['lmagenta'],
                               self.pkgname),
                  end='')

            proc = subprocess.check_output('sbbdep --ldd /var/log/packages/'
                                           '{0}; exit 0'.format(pkg),
                                           stderr=subprocess.STDOUT,
                                           shell=True)
            errors = []
            for line in proc.decode('utf-8').split('\n'):
                if ('can not read file:' in line or
                        'no version information' in line or
                        line.startswith(' for /')):
                    errors.append(line)

            if errors:
                brokenpkg += 1
                self.print_rezult('Error', 'red')
                logfile.write('{0}\n'.format(self.pkgname))
                logfile.write('{0}\n'.format(get_line('-',
                                                      len(self.pkgname) + 1)))
                for line in errors:
                    line = line.strip()
                    print('{0}{1}{2}{3}'.format(get_indent(0, 8),
                                                self.meta.clrs['red'],
                                                line,
                                                self.meta.clrs['reset']))
                    logfile.write('{0}\n'.format(line))
                logfile.write('\n')
            else:
                self.print_rezult('Ok', 'green')

            numpkg += 1

        logfile.close()
        if brokenpkg:
            self.print_rezult(('\n{0} packages have '
                               'problems.').format(brokenpkg), 'red')
            print('Log file: {0}'
                  '/tmp/sbbcheck.log{1}'.format(self.meta.clrs['grey'],
                                                self.meta.clrs['reset']),
                  end='\n\n')
        else:
            self.print_rezult(('\nCongratulations !!! sbbdep not found '
                               'problems with dependencies.'), 'green')
            print()

    def print_rezult(self, string, color):
        """
        print rezult
        """
        print('{0}{1}{2}{3}'.format(get_indent(len(self.pkgname) + 15, 50),
                                    self.meta.clrs[color],
                                    string,
                                    self.meta.clrs['reset']))
