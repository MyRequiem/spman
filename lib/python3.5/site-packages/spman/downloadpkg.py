#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# downloadpkg file is part of spman

# Copyright 2016 MyRequiem <mrvladislavovich@gmail.com>
# All rights reserved

# spman - Slackware package manager
# Home page: https://github.com/MyRequiem/spman

# Spman is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""
Download packages or sources (SlackBuilds)
"""

from os import (
    path,
    rename
)
from shutil import rmtree
from subprocess import call

from spman.maindata import MainData
from spman.helpmess import show_help_mess
from spman.getrepodata import GetRepoData
from spman.utils import download


class DownloadPkg(object):
    """
    Download packages or sources (SlackBuilds)
    """
    def __init__(self, mode, repo, pkglist):
        self.meta = MainData()
        self.os_ver = self.meta.get_os_version()
        # download src or pkg
        self.mode = mode
        # repo name
        self.repo = repo
        # packages list for download
        self.pkglist = pkglist
        self.repos = self.meta.get_repo_dict()
        self.repodata = {}
        self.prefix = self.meta.get_spman_conf()['BUILD_PATH']
        self.wgetdir = ('--no-check-certificate -r -q -nH -ct 0 -w 2 -l 10 '
                        '--cut-dirs={0} --no-parent -R *.meta4,*.mirrorlist,'
                        'index.html*')

    def start(self):
        """
        start download
        """
        if self.mode not in ['--src', '--pkg']:
            show_help_mess('error')

        if self.repo not in self.repos:
            show_help_mess(self.repo)

        if self.mode == '--pkg' and self.repo == 'sbo':
            print('Only source code (SlackBuild) can be '
                  'downloaded from \'sbo\' repository')
            raise SystemExit

        if self.mode == '--src' and self.repo == 'multilib':
            print('Only binary packages can be downloaded '
                  'from \'multilib\' repository')
            raise SystemExit

        self.repodata = GetRepoData(self.repo).start()

        if self.repo == 'alienbob':
            self.download_alienbob()

    def download_alienbob(self):
        """
        download from alienbob repository
        """
        arch = 'x86_64' if self.meta.arch == 'x86_64' else 'x86'
        for pkg in self.pkglist:
            if pkg not in self.repodata['pkgs']:
                print(('{0}Package {1} not found in {2} '
                       'repository{3}').format(self.meta.clrs['red'],
                                               pkg,
                                               self.repo,
                                               self.meta.clrs['reset']))
                continue

            pkgdata = self.repodata['pkgs'][pkg]
            if self.mode == '--pkg':
                # download binary package
                fname = '{0}.{1}'.format('-'.join(pkgdata[0]),
                                         pkgdata[8])
                url = '{0}{1}/{2}/{3}/{4}'.format(self.repos[self.repo],
                                                  self.os_ver,
                                                  arch,
                                                  pkg,
                                                  fname)

                dfile = '{0}{1}'.format(self.prefix, fname)
                download(dfile, url, self.prefix)
            else:
                # download directory with SlackBuild
                url = '{0}{1}/build/'.format(self.repos[self.repo].replace(
                    'sbrepos', 'slackbuilds'), pkg)
                dfile = '{0}build'.format(self.prefix)
                download(dfile, url, self.prefix,
                         self.wgetdir.format(self.get_cut_dirs(url)))

                if path.isdir(dfile):
                    new_dir_name = '{0}{1}'.format(self.prefix, pkg)
                    if path.isdir(new_dir_name):
                        rmtree(new_dir_name)
                    rename(dfile, new_dir_name)
                    call(('find {0} -type f -a \\( -name "*.SlackBuild" '
                          '-o -name "*.sh" \\) -exec '
                          'chmod 744 {{}} \\;').format(new_dir_name),
                         shell=True)

    @staticmethod
    def get_cut_dirs(url):
        """
        return count cut dirs from url
        """
        return len(url.split('/')[3:-2])
